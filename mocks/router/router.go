// Code generated by MockGen. DO NOT EDIT.
// Source: ./router/router.go

// Package router_mock is a generated GoMock package.
package router_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRouter is a mock of IRouter interface.
type MockIRouter struct {
	ctrl     *gomock.Controller
	recorder *MockIRouterMockRecorder
}

// MockIRouterMockRecorder is the mock recorder for MockIRouter.
type MockIRouterMockRecorder struct {
	mock *MockIRouter
}

// NewMockIRouter creates a new mock instance.
func NewMockIRouter(ctrl *gomock.Controller) *MockIRouter {
	mock := &MockIRouter{ctrl: ctrl}
	mock.recorder = &MockIRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRouter) EXPECT() *MockIRouterMockRecorder {
	return m.recorder
}

// InitRoute mocks base method.
func (m *MockIRouter) InitRoute(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitRoute", ctx)
}

// InitRoute indicates an expected call of InitRoute.
func (mr *MockIRouterMockRecorder) InitRoute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRoute", reflect.TypeOf((*MockIRouter)(nil).InitRoute), ctx)
}

// Run mocks base method.
func (m *MockIRouter) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIRouterMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIRouter)(nil).Run), ctx)
}
